import { useCallback } from "react";
import Head from "next/head";
import Link from "next/link";
import { action, values } from "mobx";
import { Observer } from "mobx-react-lite";
import { flow, types } from "mobx-state-tree";

// mui
import Box from "@mui/material/Box";
import Button from "@mui/material/Button";
import Pagination from "@mui/material/Pagination";
import MenuItem from "@mui/material/MenuItem";
import Select, { SelectChangeEvent } from "@mui/material/Select";
import { DataGrid, GridColDef } from "@mui/x-data-grid";

export default function UsersMobxStateTree() {
  const columns: GridColDef[] = [
    {
      field: "firstName",
      headerName: "First name",
      width: 150,
    },
    {
      field: "lastName",
      headerName: "Last name",
      width: 150,
    },
    {
      field: "username",
      headerName: "Username",
      width: 150,
    },
    {
      field: "email",
      headerName: "Email",
      width: 300,
    },
    {
      field: "gender",
      headerName: "Gender",
      width: 100,
    },
  ];

  const User = types.model({
    id: types.optional(types.string, ""),
    firstName: types.optional(types.string, ""),
    lastName: types.optional(types.string, ""),
    email: types.optional(types.string, ""),
    gender: types.optional(types.string, ""),
  });

  const RootStore = types
    .model({
      users: types.array(User),
      rowsCount: types.number,
      pageNumber: types.number,
      pageSize: types.number,
    })
    .views((self) => ({
      get usersValues() {
        return values(self.users);
      },
      get pageCount() {
        return self.rowsCount / self.pageSize;
      },
    }))
    .actions((self) => {
      const fetchUsers = async () => {
        try {
          const res = await fetch(
            `https://randomuser.me/api/?page=${self.pageNumber}&results=${self.pageSize}&seed=abc`
          );
          const data = await res.json();

          return data.results.map((user: any) => ({
            id: user.login.uuid,
            firstName: user.name.first,
            lastName: user.name.last,
            username: user.login.username,
            email: user.email,
            gender: user.gender,
          }));
        } catch (error) {
          console.error(error);
        }
        return [];
      };

      const getUsers = flow(function* () {
        const users = yield fetchUsers();
        self.users = users;
      });

      const setPageNumber = (pageNumber: number): void => {
        self.pageNumber = pageNumber;
        getUsers();
      };

      const setPageSize = (pageSize: number): void => {
        self.pageSize = pageSize;
        getUsers();
      };

      const afterCreate = getUsers;

      return {
        afterCreate,
        getUsers,
        setPageNumber,
        setPageSize,
      };
    });

  const usersStore = RootStore.create({
    users: [],
    rowsCount: 1000000,
    pageNumber: 1,
    pageSize: 20,
  });

  const onChangePage = action(
    useCallback(
      (_event: React.ChangeEvent<unknown>, page: number) => {
        usersStore.setPageNumber(page);
      },
      [usersStore]
    )
  );

  const onChangePageSize = action(
    useCallback(
      (event: SelectChangeEvent) => {
        usersStore.setPageSize(event.target.value as unknown as number);
      },
      [usersStore]
    )
  );

  return (
    <Observer>
      {() => (
        <div className="container">
          <Head>
            <title>Tasks App</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>

          <main className="row justify-content-center">
            <div className="my-5">
              <h1 className="my-2">Users list with Mobx State Tree</h1>

              <Link href="/">
                <Button className="me-3" variant="outlined">
                  Go to tasks app
                </Button>
              </Link>
            </div>

            <div
              style={{
                border: "1px",
                borderStyle: "solid",
                borderColor: "lightgray",
                margin: "0px",
                padding: "0px",
              }}
            >
              <Box
                sx={{
                  height: 400,
                  width: "100%",
                  margin: "0px",
                  padding: "0px",
                }}
              >
                <DataGrid
                  columns={columns}
                  rows={usersStore.usersValues}
                  rowCount={usersStore.rowsCount}
                  pageSize={usersStore.pageSize}
                  rowsPerPageOptions={[5, 10, 20]}
                  experimentalFeatures={{ newEditingApi: true }}
                  pagination={true}
                  paginationMode={"server"}
                  checkboxSelection
                  disableSelectionOnClick
                  hideFooterPagination
                  hideFooter
                />
              </Box>
              <div className="m-3 d-flex justify-content-end">
                <div className="d-flex justify-content-center align-items-center">
                  <p className="m-1 me-2">Rows per page</p>
                  <Select
                    sx={{ height: 35 }}
                    value={usersStore.pageSize as unknown as string}
                    onChange={onChangePageSize}
                  >
                    <MenuItem value={5}>5</MenuItem>
                    <MenuItem value={10}>10</MenuItem>
                    <MenuItem value={20}>20</MenuItem>
                  </Select>
                </div>
                <Pagination
                  shape="rounded"
                  count={usersStore.pageCount}
                  page={usersStore.pageNumber}
                  onChange={onChangePage}
                />
              </div>
            </div>
          </main>
        </div>
      )}
    </Observer>
  );
}
