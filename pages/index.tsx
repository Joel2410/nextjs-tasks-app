import type { NextPage } from "next";
import Head from "next/head";
import TasksList from "../interfaces/tasks-list.interface";
import TasksListComponent from "../components/tasks-list.component";
import { DragDropContext, DropResult } from "react-beautiful-dnd";
import { useEffect, useState } from "react";
import Task from "../interfaces/task.interface";

const API = "http://localhost:3000/api";

type Props = {
  tasksLists: TasksList[];
};

const Home: NextPage<Props> = ({ tasksLists }) => {
  const [ready, setReady] = useState(false);

  useEffect(() => {
    if (typeof window === "object") {
      setReady(true);
    }
  }, []);

  const onDragEnd = async (result: DropResult): Promise<void> => {
    if (!result.source || !result.destination) {
      return;
    }

    const originList = tasksLists.find(
      (list) => list.id === result.source.droppableId
    );
    if (!originList) {
      return;
    }

    const destinationList = tasksLists.find(
      (list) => list.id === result.destination?.droppableId
    );
    if (!destinationList) {
      return;
    }

    const draggedTask = originList.tasks[result.source.index];
    if (!draggedTask) {
      return;
    }

    draggedTask.tasksListId = destinationList.id;
    originList.tasks.splice(result.source.index, 1);
    destinationList.tasks.splice(result.destination.index, 0, draggedTask);

    originList.tasks.forEach((task, index) => {
      task.index = index;
    });

    destinationList.tasks.forEach((task, index) => {
      task.index = index;
    });

    const uptatedTasks = [...originList.tasks, ...destinationList.tasks];

    try {
      await updateTasks(uptatedTasks);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div className="container">
      <Head>
        <title>Tasks App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <h1 className="my-5">
          Create <a href="https://nextjs.org">new task!</a>
        </h1>

        <div className="row">
          {ready && (
            <DragDropContext onDragEnd={onDragEnd}>
              {tasksLists.map((tasksList) => (
                <TasksListComponent key={tasksList.id} tasksList={tasksList} />
              ))}
            </DragDropContext>
          )}
        </div>
      </main>
    </div>
  );
};

export async function getServerSideProps(): Promise<{ props: Props }> {
  const res = await fetch(`${API}/tasks-list`);
  const data: TasksList[] = await res.json();
  return { props: { tasksLists: data } };
}

async function updateTasks(tasks: Task[]): Promise<boolean> {
  const res = await fetch(`${API}/tasks`, {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(tasks),
  });

  return res.status === 200;
}

export default Home;
