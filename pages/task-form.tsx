import { ChangeEvent, FormEventHandler } from "react";
import { useRouter } from "next/router";
import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { action } from "mobx";
import { observer, useLocalObservable } from "mobx-react-lite";

// mui
import Button from "@mui/material/Button";
import TextField from "@mui/material/TextField";

// own imports
import Task from "../interfaces/task.interface";
import { tasksService } from "./_app";

type Props = {
  task: Task;
};

const TaskForm: NextPage<Props> = ({ task }) => {
  const router = useRouter();
  const isEdit = !!task.id;
  const data = useLocalObservable(() => ({ formData: task ?? tasksService.newTask() }));

  const onSubmit: FormEventHandler = async (event) => {
    event.preventDefault();
    if (isEdit) {
      if (await tasksService.updateTask(data.formData)) {
        router.push("/");
        return;
      }
      return;
    }

    const tasksListId = router.query?.tasksListId as string;
    if (
      await tasksService.saveTask({
        ...data.formData,
        deployed: false,
        index: -1,
        tasksListId,
      })
    ) {
      router.push("/");
    }
  };

  const handleChange = action((event: ChangeEvent<HTMLInputElement>) => {
    const { id, value } = event.target;
    data.formData = { ...data.formData, [id]: value }
  });

  return (
    <div className="container">
      <Head>
        <title>Tasks App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="row justify-content-center">
        <h1 className="my-5 text-center">Create Task!</h1>
        <form
          onSubmit={onSubmit}
          method="POST"
          className="row card p-4"
          style={{ width: "400px" }}
        >
          <div className="col mb-3">
            <TextField
              id="title"
              label="Title"
              variant="outlined"
              placeholder="To do..."
              value={data.formData.title}
              onChange={handleChange}
              inputProps={{ minLength: 4, required: true }}
              fullWidth
              autoFocus
            />
          </div>

          <div className="col mb-3">
            <TextField
              id="description"
              label="Description"
              variant="outlined"
              placeholder="Something..."
              value={data.formData.description}
              onChange={handleChange}
              inputProps={{ minLength: 4, required: true }}
              fullWidth
            />
          </div>
          <div className="col">
            <div className="row justify-content-between px-3">
              <Link href="/">
                <Button
                  type="button"
                  variant="contained"
                  className="col-4"
                  color="secondary"
                >
                  Cancel
                </Button>
              </Link>
              <Button
                type="submit"
                variant="contained"
                className="col-4"
                color="primary"
              >
                Save
              </Button>
            </div>
          </div>
        </form>
      </main>
    </div>
  );
};

export async function getServerSideProps(context: {
  query: { taskId: string };
}): Promise<{ props: Props }> {
  const { query } = context;
  const taskId = query?.taskId;

  if (!taskId) {
    return { props: { task: tasksService.newTask() } };
  }

  const task = await tasksService.getTask(taskId);

  return { props: { task } };
}

export default observer(TaskForm);
